const { exec, spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const EventEmitter = require('events');

class SunshineController extends EventEmitter {
  constructor() {
    super();
    this.sunshineProcess = null;
    this.config = {
      port: 47989,
      webPort: 47990,
      videoCodec: 'h264',
      bitrate: 20000,
      fps: 60,
      resolution: '1920x1080'
    };
  }

  async installSunshine(platform) {
    const installScripts = {
      linux: `
        wget -qO - https://packagecloud.io/LizardByte/stable/gpgkey | sudo apt-key add -
        echo "deb https://packagecloud.io/LizardByte/stable/ubuntu/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/sunshine.list
        sudo apt update
        sudo apt install -y sunshine
      `,
      windows: `
        # Download Sunshine installer
        Invoke-WebRequest -Uri "https://github.com/LizardByte/Sunshine/releases/latest/download/sunshine-windows-installer.exe" -OutFile "sunshine-installer.exe"
        # Run installer silently
        Start-Process -FilePath "sunshine-installer.exe" -ArgumentList "/S" -Wait
      `,
      darwin: `
        brew install --cask sunshine
      `
    };

    return new Promise((resolve, reject) => {
      const script = installScripts[platform];
      if (!script) {
        reject(new Error(`Unsupported platform: ${platform}`));
        return;
      }

      exec(script, (error, stdout, stderr) => {
        if (error) {
          reject(error);
          return;
        }
        resolve({ stdout, stderr });
      });
    });
  }

  async startSunshine(customConfig = {}) {
    const config = { ...this.config, ...customConfig };
    
    // Generate Sunshine config file
    const configPath = await this.generateConfig(config);
    
    // Start Sunshine process
    this.sunshineProcess = spawn('sunshine', [configPath], {
      detached: false,
      stdio: ['ignore', 'pipe', 'pipe']
    });

    this.sunshineProcess.stdout.on('data', (data) => {

      this.emit('log', data.toString());
    });

    this.sunshineProcess.stderr.on('data', (data) => {
      console.error(`Sunshine Error: ${data}`);
      this.emit('error', data.toString());
    });

    this.sunshineProcess.on('close', (code) => {

      this.emit('close', code);
      this.sunshineProcess = null;
    });

    return this.sunshineProcess.pid;
  }

  async stopSunshine() {
    if (this.sunshineProcess) {
      this.sunshineProcess.kill('SIGTERM');
      return true;
    }
    return false;
  }

  async generateConfig(config) {
    const configContent = `
# Sunshine Configuration
# Generated by Web Appliance Dashboard

# Network settings
port = ${config.port}
https_port = ${config.webPort}

# Video settings
video_codec = ${config.videoCodec}
bitrate = ${config.bitrate}
fps = ${config.fps}
resolution = ${config.resolution}

# Audio settings
audio_codec = opus
audio_bitrate = 128

# Input settings
gamepad = auto
keyboard = enabled
mouse = enabled

# Security
origin_pin = auto
upnp = disabled
`;

    const configPath = path.join(__dirname, 'sunshine.conf');
    await fs.writeFile(configPath, configContent);
    return configPath;
  }

  async getStatus() {
    if (!this.sunshineProcess) {
      return { running: false };
    }

    try {
      // Check if Sunshine web API is responding
      const response = await fetch(`https://localhost:${this.config.webPort}/api/apps`, {
        rejectUnauthorized: false
      });
      
      return {
        running: true,
        pid: this.sunshineProcess.pid,
        webUI: `https://localhost:${this.config.webPort}`,
        streamPort: this.config.port
      };
    } catch (error) {
      return {
        running: true,
        pid: this.sunshineProcess.pid,
        error: 'Web UI not responding'
      };
    }
  }

  async pairClient(pin) {
    // Pair a Moonlight client using the PIN
    const pairUrl = `https://localhost:${this.config.webPort}/api/pin`;
    const response = await fetch(pairUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ pin }),
      rejectUnauthorized: false
    });
    
    return response.json();
  }
}

module.exports = SunshineController;
