#!/usr/bin/env node

/**
 * Fix Terminal Connections After Restore
 * This script fixes all SSH-related issues after a database restore
 */

const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

// Database configuration
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 3306,
  user: process.env.DB_USER || 'dashboard_user',
  password: process.env.DB_PASSWORD || 'dashboard_pass123',
  database: process.env.DB_NAME || 'appliance_dashboard'
};

const SSH_DIR = '/root/.ssh';
const SSH_CONFIG_PATH = '/root/.ssh/config';

async function fixTerminalConnections() {
  let connection;
  
  try {

    // Connect to database
    connection = await mysql.createConnection(dbConfig);

    // 1. Ensure SSH directory exists with correct permissions

    if (!fs.existsSync(SSH_DIR)) {
      fs.mkdirSync(SSH_DIR, { recursive: true, mode: 0o700 });

    } else {
      fs.chmodSync(SSH_DIR, 0o700);

    }
    
    // 2. Restore SSH keys from database

    const [sshKeys] = await connection.execute(`
      SELECT id, key_name, private_key, public_key, created_by
      FROM ssh_keys
      WHERE private_key IS NOT NULL
    `);

    for (const key of sshKeys) {
      try {
        // Determine filename
        let filename;
        if (key.created_by && key.created_by !== 1) {
          filename = `id_rsa_user${key.created_by}_${key.key_name}`;
        } else {
          filename = `id_rsa_${key.key_name}`;
        }
        
        const privateKeyPath = path.join(SSH_DIR, filename);
        const publicKeyPath = path.join(SSH_DIR, `${filename}.pub`);
        
        // Write private key
        fs.writeFileSync(privateKeyPath, key.private_key, { mode: 0o600 });

        // Write public key if available
        if (key.public_key) {
          fs.writeFileSync(publicKeyPath, key.public_key, { mode: 0o644 });
        }
      } catch (error) {
        console.error(`  ❌ Failed to restore key "${key.key_name}":`, error.message);
      }
    }
    
    // 3. Generate SSH config

    const baseConfig = `# SSH Config auto-generated by Web Appliance Dashboard
# Generated after restore

Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    LogLevel QUIET
    ConnectTimeout 10
    ServerAliveInterval 30
    ServerAliveCountMax 3
    PasswordAuthentication no
    PubkeyAuthentication yes
    IdentitiesOnly yes`;

    const configs = [baseConfig];
    
    // Get all hosts with SSH configuration
    const [hosts] = await connection.execute(`
      SELECT id, name, hostname, port, username, ssh_key_name
      FROM hosts 
      WHERE is_active = 1 
        AND ssh_key_name IS NOT NULL 
        AND ssh_key_name != ''
      ORDER BY name
    `);

    for (const host of hosts) {
      const hostConfig = `
# ${host.name}
Host ${host.hostname}
    HostName ${host.hostname}
    Port ${host.port || 22}
    User ${host.username}
    IdentityFile ${SSH_DIR}/id_rsa_${host.ssh_key_name}`;
      
      configs.push(hostConfig);

    }
    
    // Write SSH config
    const configContent = configs.join('\n');
    fs.writeFileSync(SSH_CONFIG_PATH, configContent, { mode: 0o600 });

    // 4. Fix terminal sessions in database (if table exists)

    // Check if terminal_sessions table exists
    const [tables] = await connection.execute(`
      SELECT TABLE_NAME 
      FROM information_schema.TABLES 
      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'terminal_sessions'
    `, [dbConfig.database]);
    
    if (tables.length > 0) {
      // Clear any stale terminal sessions
      await connection.execute(`
        UPDATE terminal_sessions 
        SET status = 'closed', 
            ended_at = NOW() 
        WHERE status = 'active'
      `);

    } else {

    }
    
    // 5. Verify hosts have proper SSH keys

    const [hostsWithoutKeys] = await connection.execute(`
      SELECT id, name, hostname 
      FROM hosts 
      WHERE is_active = 1 
        AND (ssh_key_name IS NULL OR ssh_key_name = '')
    `);
    
    if (hostsWithoutKeys.length > 0) {

      for (const host of hostsWithoutKeys) {

        // Try to assign dashboard key if available
        const dashboardKeyPath = path.join(SSH_DIR, 'id_rsa_dashboard');
        if (fs.existsSync(dashboardKeyPath)) {
          await connection.execute(
            `UPDATE hosts SET ssh_key_name = 'dashboard' WHERE id = ?`,
            [host.id]
          );

        }
      }
    } else {

    }
    
    // 6. Fix permissions on all SSH files

    const files = fs.readdirSync(SSH_DIR);
    for (const file of files) {
      const filePath = path.join(SSH_DIR, file);
      const stat = fs.statSync(filePath);
      
      if (file === 'config') {
        fs.chmodSync(filePath, 0o600);
      } else if (file.startsWith('id_rsa') && !file.endsWith('.pub')) {
        fs.chmodSync(filePath, 0o600);
      } else if (file.endsWith('.pub')) {
        fs.chmodSync(filePath, 0o644);
      }
    }

    // 7. List all SSH keys for verification

    const keyFiles = files.filter(f => f.startsWith('id_rsa'));
    keyFiles.forEach(file => {
      const stat = fs.statSync(path.join(SSH_DIR, file));
      const perms = '0' + (stat.mode & parseInt('777', 8)).toString(8);

    });

  } catch (error) {
    console.error('\n❌ Error fixing terminal connections:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();

    }
  }
}

// Run if executed directly
if (require.main === module) {
  fixTerminalConnections()
    .then(() => {
      process.exit(0);
    })
    .catch(error => {
      console.error('Fatal error:', error);
      process.exit(1);
    });
}

module.exports = { fixTerminalConnections };
