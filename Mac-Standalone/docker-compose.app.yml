# Docker Compose für Web Appliance Dashboard macOS App
# Verwendet andere Ports und Container-Namen als das Hauptprojekt

services:
  # MariaDB Database
  database:
    image: mariadb:latest
    container_name: wad_app_db
    restart: always
    ports:
      - "3307:3306"  # Anderer Port als Hauptprojekt
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword123
      MYSQL_DATABASE: appliance_dashboard
      MYSQL_USER: dashboard_user
      MYSQL_PASSWORD: dashboard_pass123
    volumes:
      - app_db_data:/var/lib/mysql
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 20
      start_period: 40s

  # Node.js Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: wad_app_backend
    restart: always
    ports:
      - "3002:3001"  # Anderer Port als Hauptprojekt
    environment:
      DB_HOST: database
      DB_PORT: 3306
      DB_USER: dashboard_user
      DB_PASSWORD: dashboard_pass123
      DB_NAME: appliance_dashboard
      JWT_SECRET: V2FUAJ3cOAghJY8B3FprwknN5/ZktN0gX+x/D4GEhQv+dk2dDoYYwWjIhNR7KPkXWNXrX/+Sx2C9U/UCDYiaSw==
      SSH_KEY_ENCRYPTION_SECRET: o2ZGotcuB3cTBhs/7xQoAj3WXCIZEs8CyOLbmgdHx5M=
      NODE_ENV: production
      ALLOWED_ORIGINS: "http://localhost,https://localhost,http://localhost:9081,https://localhost:9444"
      SSH_TOOLS_ENABLED: "true"
      SSH_AUTO_INIT: "true"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ../backend:/app
      - /app/node_modules
      - app_ssh_keys:/root/.ssh
      - app_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3001/api/health && which ssh && which ssh-copy-id && which sshpass"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Web Server
  webserver:
    image: nginx:alpine
    container_name: wad_app_webserver
    restart: always
    ports:
      - "9081:80"   # Andere Ports als Hauptprojekt
      - "9444:443"
    volumes:
      - ../nginx/nginx-macapp-docker.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/conf.d:/etc/nginx/conf.d:ro
      - ../frontend/build:/usr/share/nginx/html:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      ttyd:
        condition: service_started
      # Guacamole is optional
    networks:
      - app_network

  # ttyd Web Terminal
  ttyd:
    build: ../ttyd
    container_name: wad_app_ttyd
    restart: always
    ports:
      - "7682:7681"  # Anderer Port als Hauptprojekt
    command: >
      ttyd
      --writable
      --port 7681
      --base-path /
      --terminal-type xterm-256color
      /scripts/ttyd-ssh-wrapper.sh
    environment:
      SSH_HOST: ${TTYD_DEFAULT_HOST:-192.168.178.70}
      SSH_USER: ${TTYD_DEFAULT_USER:-alflewerken}
      SSH_PORT: ${TTYD_DEFAULT_PORT:-22}
    networks:
      - app_network
    volumes:
      - app_ssh_keys:/root/.ssh:ro
      - ../scripts:/scripts:ro

  # ====================================================================
  # REMOTE DESKTOP SERVICES (GUACAMOLE)
  # ====================================================================
  
  # Guacamole Proxy Daemon
  guacd:
    image: guacamole/guacd:1.5.5
    platform: linux/amd64  # Rosetta 2 wird für M1/M2 Macs verwendet
    container_name: wad_app_guacd
    restart: always
    volumes:
      - app_guacamole_drive:/drive:rw
      - app_guacamole_record:/record:rw
    environment:
      GUACD_LOG_LEVEL: info
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4822"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Guacamole PostgreSQL Database
  guacamole-postgres:
    image: postgres:15-alpine
    container_name: wad_app_guacamole_db
    restart: always
    environment:
      POSTGRES_DB: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: guacamole_pass123
    volumes:
      - app_guacamole_db:/var/lib/postgresql/data
      - ../guacamole/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql:ro
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guacamole_user"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Guacamole Web Application
  guacamole:
    image: guacamole/guacamole:1.5.5
    platform: linux/amd64  # Rosetta 2 wird für M1/M2 Macs verwendet
    container_name: wad_app_guacamole
    restart: always
    depends_on:
      guacd:
        condition: service_healthy
      guacamole-postgres:
        condition: service_healthy
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_HOSTNAME: guacamole-postgres
      POSTGRES_DATABASE: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: guacamole_pass123
      # Integration settings
      HEADER_ENABLED: 'true'
      # CORS für iFrame
      EXTENSION_PRIORITY: '*'
      # Optional: Custom settings
      GUACAMOLE_HOME: /etc/guacamole
    ports:
      - "9782:8080"  # Spezieller Port für Mac App
    networks:
      - app_network
    volumes:
      - ../guacamole/extensions:/opt/guacamole/extensions:ro
      - app_guacamole_home:/etc/guacamole
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/guacamole/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  app_db_data:
    driver: local
    name: wad_app_db_data
  app_ssh_keys:
    driver: local
    name: wad_app_ssh_keys
  app_uploads:
    driver: local
    name: wad_app_uploads
  # Guacamole volumes
  app_guacamole_db:
    driver: local
    name: wad_app_guacamole_db
  app_guacamole_drive:
    driver: local
    name: wad_app_guacamole_drive
  app_guacamole_record:
    driver: local
    name: wad_app_guacamole_record
  app_guacamole_home:
    driver: local
    name: wad_app_guacamole_home

networks:
  app_network:
    driver: bridge
    name: wad_app_network
