# Guacamole proxy configuration with JWT authentication
upstream guacamole {
    server guacamole:8080;
}

# Variables for JWT validation
map $http_authorization $jwt_token {
    ~^Bearer\s+(.+)$ $1;
    default "";
}

server {
    listen 8070;
    server_name localhost;
    
    # Health check endpoint
    location /health {
        return 200 "OK";
        add_header Content-Type text/plain;
    }
    
    # Handle preflight requests
    location / {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
            add_header 'Access-Control-Max-Age' 3600;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # Main Guacamole location
    location /guacamole/ {
        # Variable for JWT username
        set $jwt_username "";
        
        # Check for auth cookie or token
        set $auth_cookie "";
        if ($http_cookie ~* "GUAC_AUTH=([^;]+)") {
            set $auth_cookie $1;
        }
        
        set $token_param $arg_token;
        set $auth_token "";
        
        # Priority: Cookie > Query param > Header
        if ($auth_cookie != "") {
            set $auth_token $auth_cookie;
        }
        
        if ($auth_token = "") {
            set $auth_token $token_param;
        }
        
        if ($auth_token = "") {
            set $auth_token $jwt_token;
        }
        
        # Validate JWT token only for initial request or if no cookie
        access_by_lua_block {
            local jwt = require "resty.jwt"
            local validators = require "resty.jwt-validators"
            local cjson = require "cjson"
            
            -- Get token
            local token = ngx.var.auth_token
            local cookie = ngx.var.auth_cookie
            
            -- Skip validation for static resources if cookie exists
            local uri = ngx.var.uri
            if cookie ~= "" and (
                string.match(uri, "%.js$") or
                string.match(uri, "%.css$") or
                string.match(uri, "%.png$") or
                string.match(uri, "%.jpg$") or
                string.match(uri, "%.gif$") or
                string.match(uri, "%.ico$") or
                string.match(uri, "%.svg$") or
                string.match(uri, "%.woff2?$") or
                string.match(uri, "%.ttf$") or
                string.match(uri, "%.eot$")
            ) then
                return  -- Skip validation for static files with valid cookie
            end
            
            if not token or token == "" then
                ngx.status = 401
                ngx.header["Content-Type"] = "application/json"
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.say(cjson.encode({error = "No token provided"}))
                return ngx.exit(401)
            end
            
            -- Get JWT secret
            local jwt_secret = "BkwjTqg+LYnBXlibieVm8k4jEeYSPLroceS3MQYQjJEcVGZrTLGbAFoLHqG+Pj0G4xx5lbfQNCZg8XL2kZoNdQ=="
            
            -- Verify token
            local jwt_obj = jwt:verify(jwt_secret, token)
            
            if not jwt_obj.verified then
                ngx.status = 401
                ngx.header["Content-Type"] = "application/json"
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.say(cjson.encode({
                    error = "Invalid token", 
                    reason = jwt_obj.reason
                }))
                return ngx.exit(401)
            end
            
            -- Check required fields
            local payload = jwt_obj.payload
            if not payload.sub or not payload.userId or not payload.applianceId then
                ngx.status = 401
                ngx.header["Content-Type"] = "application/json"
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.say(cjson.encode({error = "Missing required token fields"}))
                return ngx.exit(401)
            end
            
            -- Check token expiration
            local current_time = ngx.time()
            if payload.exp and payload.exp < current_time then
                ngx.status = 401
                ngx.header["Content-Type"] = "application/json"
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.say(cjson.encode({error = "Token expired", exp = payload.exp, now = current_time}))
                return ngx.exit(401)
            end
            
            -- Set auth cookie for subsequent requests
            ngx.header["Set-Cookie"] = "GUAC_AUTH=" .. token .. "; Path=/; HttpOnly; SameSite=Lax"
            
            -- Store user info for proxy headers
            ngx.ctx.jwt_username = payload.sub
            ngx.ctx.jwt_user_id = payload.userId
            ngx.ctx.jwt_appliance_id = payload.applianceId
            
            -- Set variable for proxy_set_header
            ngx.var.jwt_username = payload.sub
        }
        
        # Proxy to Guacamole
        proxy_pass http://guacamole;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Set authentication header from JWT
        proxy_set_header X-Remote-User $jwt_username;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;
    }
    
    # WebSocket tunnel endpoint
    location /guacamole/websocket-tunnel {
        proxy_pass http://guacamole;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
        proxy_buffering off;
        
        # Pass through headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # HTTP tunnel endpoint  
    location /guacamole/tunnel {
        proxy_pass http://guacamole;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}