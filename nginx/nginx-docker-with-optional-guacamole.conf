events {
    worker_connections 1024;
}

http {
    # Minimal configuration without mime.types
    default_type  application/octet-stream;
    
    # Increase client body size limit (50GB for large files)
    client_max_body_size 50G;
    
    # Resolver for dynamic upstream resolution (Docker DNS)
    resolver 127.0.0.11 valid=30s;
    
    # Manually define common mime types
    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        application/javascript                js;
        application/json                      json;
        application/x-font-ttf                ttc ttf;
        application/x-font-otf                otf;
        application/x-font-woff               woff;
        application/x-font-woff2              woff2;
        application/vnd.ms-fontobject         eot;
        application/octet-stream              bin exe dll;
        application/octet-stream              deb;
        application/octet-stream              dmg;
        application/octet-stream              iso img;
        application/octet-stream              msi msp msm;
        audio/mpeg                            mp3;
        audio/x-realaudio                     ra;
        video/mp4                             mp4;
        video/mpeg                            mpeg mpg;
        video/quicktime                       mov;
        video/webm                            webm;
        video/x-flv                           flv;
        video/x-mng                           mng;
        video/x-ms-asf                        asx asf;
        video/x-ms-wmv                        wmv;
        video/x-msvideo                       avi;
        image/png                             png;
        image/svg+xml                         svg svgz;
        image/tiff                            tif tiff;
        image/webp                            webp;
        image/x-icon                          ico;
        image/x-jng                           jng;
        image/x-ms-bmp                        bmp;
    }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;

    # HTTP Server
    server {
        listen 80;
        server_name _;

        # Frontend - serve static files from volume
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # Backend API
        location /api/ {
            # WICHTIG: Kein /api/ am Ende, sonst wird es doppelt!
            proxy_pass http://backend:3001;
            proxy_http_version 1.1;
            
            # Important: Pass all headers including Authorization
            proxy_pass_request_headers on;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Explicitly pass Authorization header
            proxy_set_header Authorization $http_authorization;
            
            # Don't modify these headers
            proxy_pass_header Authorization;
            proxy_pass_header Content-Type;
            
            # Handle preflight OPTIONS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Length 0 always;
                return 204;
            }
        }

        # Uploads directory (images, etc)
        location /uploads {
            proxy_pass http://backend:3001;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            
            # Cache images
            location ~* \.(jpg|jpeg|png|gif|webp|svg)$ {
                proxy_pass http://backend:3001;
                expires 7d;
                add_header Cache-Control "public, immutable";
            }
        }

        # WebSocket support for SSE
        location /api/sse {
            proxy_pass http://backend:3001/api/sse;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 86400s;
            keepalive_timeout 86400s;
            
            # SSE specific headers
            proxy_set_header Cache-Control "no-cache";
            proxy_set_header X-Accel-Buffering "no";
            
            # Preserve all headers
            proxy_pass_request_headers on;
        }

        # WebSocket support
        location /socket.io {
            proxy_pass http://backend:3001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
        }

        # Terminal WebSocket support
        location /api/terminal-session {
            proxy_pass http://backend:3001/api/terminal-session;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
            proxy_pass_request_headers on;
        }

        # ttyd WebSocket - Terminal
        location ~ ^/ttyd/(.*)$ {
            proxy_pass http://ttyd:7681/$1;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
        }

        # Terminal location (redirects to ttyd)
        location /terminal/ {
            # WICHTIG: $is_args$args f√ºgt die Query-Parameter hinzu
            proxy_pass http://ttyd:7681/$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
        }

        # Guacamole Remote Desktop (optional - uses resolver for dynamic resolution)
        location /guacamole {
            # Use variable to force nginx to use resolver
            set $guacamole_upstream "guacamole:8080";
            
            # Rewrite to add trailing slash if missing
            rewrite ^/guacamole$ /guacamole/ permanent;
            
            # Proxy to Guacamole - note no trailing slash on proxy_pass
            proxy_pass http://$guacamole_upstream;
            proxy_buffering off;
            proxy_http_version 1.1;
            
            # Important headers for proper proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 86400s;
            
            # Error handling - if Guacamole is not available
            proxy_intercept_errors on;
            error_page 502 503 504 /guacamole-error.html;
        }
        
        # Error page for when Guacamole is not available
        location = /guacamole-error.html {
            internal;
            default_type text/html;
            return 503 '<html><body><h1>Remote Desktop Service Unavailable</h1><p>The Guacamole remote desktop service is currently not available. Please try again later.</p></body></html>';
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}